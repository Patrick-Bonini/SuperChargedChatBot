For a complete list of command line options, enter   â€“hm (help more) at the command prompt when you start SDKPerf. The following are the more commonly used command line options: Message type for published messages: {persistent | nonpersistent | direct } Default:direct JMS users will want to consider the following extra CLI options related to JNDI configuration. JMS connection factory.  Default: /jms/cf/default MQTT users should consider the following extra CLI options related to MQTT QoS and Session clean. Default: 0; Accepted Values: 0, 1, and 2. Default: 0; Accepted Values: 0, 1, and 2. It is also possible to overload the default subscription QoS on a per subscription basis by appending qos= to your topic. For example: -stl=test_topicqos=1) Default: 1 (true); Accepted values: 1 (true), 0 (false) REST users should consider the following extra CLI options. Latency measurement is controlled by several options. In general defaults are chosen such that latency measurement can be enabled by adding just -l to the command. However, it is often required to tune these parameters to match your environment. For high throughput tests, it is useful to enable Nagle's algorithm to allow for greater network efficiency. Controls bucket size. Bucket size increases by a factor of 2 for each increase of latency granularity. Current bucket size is printed in latency stats for reference. With order checking enabled, published messages will have a Publisher-ID and a Message-ID encoded within the Solace message. We refer to the set of all messages with the same Publisher-ID as a "publisher stream". Consumers will decode this information during message processing and validate that Message-IDs from each publisher stream are received in sequential order. The first Message-ID received in each publisher stream will serve as the starting point for that stream. All clients will have the same Publisher-ID unless the -pso option is explicitly specified. The following is sample output of the tool. This command will have a single client send one message on a topic and receive it on the same topic. $ sdkperf_java -cip= HOST -cu=user01@default -ptl=T/a -mn=1 -msa=100 -mr=1 -stl=T/a When SDKPerf starts up, it prints environment information to the console. In the above example, you can see the Java classpath, JRE location, and VM args. Additionally, SDKPerf will print information about the client so that it is easy to identify the client on the PubSub+ event broker. Following this system information, SDKPerf will print a status line for each stage of the program. Then, finally when it shuts down, it will print the summary stats outlining what was accomplished. At a minimum, SDKPerf will always print the number of messages sent and received and the computed message rate. It will print more detailed statistics as needed when the tool is used to measure things like latency, message order, message integrity, and so on.